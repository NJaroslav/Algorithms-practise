#include <iostream>
#include <vector>

/*
Кузнечик по имени Сумматор находится в первой ячейке полоски из $n$ ячеек.
Его цель — допрыгать до конца полоски и оказаться в ячейке с номером $n$. 
Из каждой ячейки он может прыгать только на две или на пять ячеек вперёд; 
выпрыгивать за пределы полоски не разрешается.В каждой ячейке записано целое число $a_i$. 
Помимо того, что кузнечику предстоит добраться из первой ячейки в ячейку $n$, 
ему ещё и нужно набрать сумму чисел, делящуюся нацело на три. 
Под набранной суммой понимается сумма чисел в ячейках, в которых побывает кузнечик на своём пути, 
включая начальную ячейку $1$ и конечную ячейку $n$.Выясните, можно ли набрать сумму, 
делящуюся на три, и найдите наибольшее возможное значение такой суммы.

Input:
В первой строке содержится целое число $n$ — количество ячеек в полоске ($2 \leqslant n \leqslant 10^5$).
Во второй строке записаны $n$ целых чисел $a_1, a_2, \ldots, a_n$ — значения чисел в ячейках ($-10^9 \leqslant a_i \leqslant 10^9$).

Output:
Если кузнечик сможет перепрыгнуть из ячейки $1$ в ячейку $n$,
набрав сумму чисел, делящуюся нацело на $3$, выведите наибольшую возможную такую сумму. 
В противном случае выведите число -2023 (со знаком «минус»).
Обратите внимание, что значение суммы может не поместиться в 32-битный целочисленный тип данных.
*/

//(a % b + b) % b

int64_t task(const std::vector<int64_t>& in, size_t n) {
    std::vector<std::vector<int64_t>> accumulator(3, std::vector<int64_t>(n, INT64_MIN));
    //
    accumulator[(in[0] % 3 + 3) % 3][0] = in[0];
    //
    for (size_t i = 0; i < n; ++i) {
        if (i + 2 < n) {
            for (int j = 0; j < 3; ++j) {
                if (accumulator[j][i] != INT64_MIN)
                    accumulator[((in[i + 2] + accumulator[j][i]) % 3 + 3) % 3][i + 2] = std::max(in[i + 2] + accumulator[j][i],
                                                            accumulator[((in[i + 2] + accumulator[j][i]) % 3 + 3) % 3][i + 2]);
            }
        }
        if (i + 5 < n) {
            for (int j = 0; j < 3; ++j) {
                if (accumulator[j][i] != INT64_MIN)
                    accumulator[((in[i + 5] + accumulator[j][i]) % 3 + 3) % 3][i + 5] = std::max(in[i + 5] + accumulator[j][i],
                                                             accumulator[((in[i + 5] + accumulator[j][i]) % 3 + 3) % 3][i + 5]);
            }
        }
    }
    //
    int64_t res;
    (accumulator[0][n - 1] == INT64_MIN) ? res = -2023 : res = accumulator[0][n - 1];
    return res;
}

int main() {
    int n;
    std::cin >> n;
    std::vector<int64_t> in(n);
    for (int i = 0; i < n; ++i)
        std::cin >> in[i];
    std::cout << task(in, n);
    return 0;
}
